package Main;


import LogIn.LoginReturnData;
import LogIn.LoginScreen;
import Parent.ParentView;
import Child.ChildView;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;
import org.xml.sax.SAXException;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Patryk
 */
public class MainGUI extends javax.swing.JFrame
{
    static WebsocketClient _client;
    static String safeword = "AlphaAF";
    private ParentView _parentView;
    private ChildView _childView;
    
    static MainGUI _mainForm = null;
    static LoginScreen _loginDialog;
    static LoginReturnData _loginData;
    static URL _url;
    static String _path;
    static String _separator;
    static File _resourceFile;
    static boolean _loginSuccessful;
    /**
     * Creates new form Main
     */
    private MainGUI()
    {
        initComponents();
        this.setIconImage(new javax.swing.ImageIcon(getClass().getResource("/betaSymble.png")).getImage());
    }
    
    public static MainGUI getInstance()
    {
        if(_mainForm == null)
        {
            _mainForm = new MainGUI();
        }
        return _mainForm;
    }
    
    public void ParentView()
    {
        _parentView = new ParentView();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(_parentView, javax.swing.GroupLayout.DEFAULT_SIZE, 421, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(_parentView, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }
    
    public void ChildView()
    {
        _childView = new ChildView();


        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(_childView, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(_childView, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );


        pack();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Beta Watch");
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosed(java.awt.event.WindowEvent evt)
            {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                formWindowClosing(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 299, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 416, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        try {
            _client.closeBlocking();
        } catch (InterruptedException ex) {
            Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowClosed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try {
            _client.closeBlocking();
        } catch (InterruptedException ex) {
            Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowClosing

    
    public static void InitializeWebSocket() throws URISyntaxException, InterruptedException, Exception
    {
        _client = WebsocketClient.getInstace();
        if(!_client.connectBlocking())
            throw new Exception("Problem Connecting!");
    }
    
    private static byte[] poorMansEncryption(byte[] b)
    {
        byte[] output = b.clone();
        int i;
        for(i = 0; i<b.length-1; i+=2)
        {
            byte first = b[i];
            byte second = b[i+1];
            output[i] = second;
            output[i+1] = first;
        }
        return output;
    }
    
    private static byte[] poorMansDecryption(byte[] b)
    {
        return poorMansEncryption(b);
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException, ParserConfigurationException, SAXException, TransformerException, URISyntaxException
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        
        //System.out.println(System.getProperty("user.home"));
        
        try{
            InitializeWebSocket();
        }
        catch (Exception ex)
        {
            System.out.println(ex.getMessage());
            if(_client != null)
            {
                try {
                    _client.close();
                }
                catch (Exception e) {
                }
            }
            return;
        }
        
        _mainForm = new MainGUI();
        _loginDialog = new LoginScreen(_mainForm, true);
        _loginData = null;
        _url = MainGUI.class.getProtectionDomain().getCodeSource().getLocation();
        _path = _url.getPath();
        _separator = (_path.contains("/")) ? "/" : "\\";
        _resourceFile = new File(_url.getPath().substring(0, _url.getPath().lastIndexOf(_separator)).replace("%20", " ")+ _separator+"Resources");

        _loginSuccessful = false;
        
        if(_resourceFile.exists())
        {
            byte[] data = new byte[(int)_resourceFile.length()];
            FileInputStream fis = new FileInputStream(_resourceFile);
            fis.read(data, 0, data.length);
            fis.close();
            String[] userSettings = new String(poorMansDecryption(data)).split(",");
            if(userSettings.length >= 3 && userSettings[3].equals(safeword)) //helps prevent tampering
            {
                try{
                _loginData = new LoginReturnData(LoginScreen.User.valueOf(userSettings[2]), userSettings[0], userSettings[1], userSettings[4]);
                }
                catch(ArrayIndexOutOfBoundsException ex)
                {
                    _loginData = new LoginReturnData(LoginScreen.User.valueOf(userSettings[2]), userSettings[0], userSettings[1], "");
                }
                _client.ValidateCredentials(_loginData.userName, _loginData.password, new Callback()
                {
                    @Override
                    public void call(String[] params)
                    {
                        _loginSuccessful = params[0].toLowerCase().contains("tr");
                        ProcessLogin();
                    }
                });
            }
        }
        else
        {
            ProcessLogin();
        }
    }
    
    static void ProcessLogin()
    {
        if(!_loginSuccessful)
        {
            
            FileOutputStream fos = null;
            try {
                _loginData = _loginDialog.showDialog();
                if(_loginData.userType == LoginScreen.User.ERROR)
                {
                    _mainForm.dispose();
                    _client.close();
                    return;
                }   String fileContent = String.format("%s,%s,%s,%s,%s", _loginData.userName, _loginData.password, _loginData.userType.name(), safeword, _loginData.childName);
                System.out.println(fileContent);
                fos = new FileOutputStream(_resourceFile);
                fos.write(poorMansEncryption(fileContent.getBytes()));
                fos.flush();
                fos.close();
            }
            catch (FileNotFoundException ex) {
                Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            catch (IOException ex) {
                Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
            }
            finally {
                try {
                    fos.close();
                }
                catch (IOException ex) {
                    Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            
        }
        
        try{
            if(_loginData.userType == LoginScreen.User.CHILD)
            {
                _mainForm.ChildView();
            }
            else if(_loginData.userType == LoginScreen.User.PARENT)
            {
                _mainForm.ParentView();
            }
            else
            {
                _client.closeBlocking();
                return;
            }
        }
        catch(NullPointerException ex)
        {
            return;
        } catch (InterruptedException ex) {
            Logger.getLogger(MainGUI.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                
                _mainForm.setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
